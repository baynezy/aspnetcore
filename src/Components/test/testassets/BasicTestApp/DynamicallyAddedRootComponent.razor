@using Microsoft.JSInterop
@implements IAsyncDisposable

<div class="dynamic-root-component" style="border: 1px dashed purple">
    <p>
        This is a Blazor component.
        Click count: <strong class="click-count">@clicks</strong>
        (will increment in steps of <strong class="increment-amount-value">@IncrementAmount</strong>)
    </p>

    <button class="increment" @onclick="Increment">Increment</button>

    @if (ShowComplexParameters)
    {
        <p class="person-info">Person is @SomePerson.Name, age @SomePerson.Age</p>
        <p class="value-from-js">Value from JS object reference: @valueFromJS</p>
    }
</div>

@code {
    int clicks;
    string valueFromJS;

    [Parameter] public int IncrementAmount { get; set; } = 1;

    [Parameter] public bool ShowComplexParameters { get; set; }
    [Parameter] public Person SomePerson { get; set; }
    [Parameter] public IJSObjectReference SomeJSObject { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (SomeJSObject is not null)
        {
            valueFromJS = await SomeJSObject.InvokeAsync<string>("getValue", null);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (SomeJSObject is not null)
        {
            await SomeJSObject.InvokeVoidAsync("willDispose", null);
        }
    }

    void Increment()
    {
        clicks += IncrementAmount;
    }

    public class Person
    {
        public string Name { get; set; }
        public decimal Age { get; set; }
    }
}
